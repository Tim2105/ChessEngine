#ifndef PSQT_H
#define PSQT_H

#include <stdint.h>

/**
 * @brief Die PSQT aus der Sicht der weißen Figuren für das Midgame.
 * 
 * Sehr ähnlich wie https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function.
 */
static constexpr int16_t MG_PSQT[7][64] = {
        // Empty
        {},
        // Pawn
        {
                0, 0, 0, 0, 0, 0, 0, 0,
                -18, 0, -10, -7, -12, 12, 19, -11,
                -15, -2, -2, -5, 1, 1, 17, -9,
                -14, -1, -2, 6, 8, 3, 5, -13,
                -7, 6, 3, 3, 3, 6, 8, -12,
                -3, 4, 6, -2, -4, 13, 6, -5,
                24, 33, 15, 24, 17, 31, 8, -3,
                0, 0, 0, 0, 0, 0, 0, 0,
        },
        // Knight
        {
                -52, -10, -29, -17, -8, -14, -10, -12,
                -15, -27, -6, -2, -1, 9, -7, -10,
                5, -5, 6, 5, 9, 8, 12, -8,
                -4, 10, 10, 14, 7, 8, 2, -7,
                11, 9, 34, 18, 27, 9, 9, -5,
                22, 36, 64, 42, 32, 18, 30, -24,
                -8, 4, 31, 12, 18, 36, -20, -37,
                -54, -7, -49, 30, -24, -17, -45, -83,
        },
        // Bishop
        {
                -16, -1, -7, -10, -6, -6, -20, -10,
                2, 7, 8, 0, 3, 10, 16, 0,
                0, 7, 7, 7, 7, 13, 9, 5,
                -3, 6, 6, 13, 17, 6, 5, 2,
                -2, 2, 10, 25, 18, 18, 3, -1,
                -8, 18, 21, 20, 17, 25, 18, -1,
                -13, 8, -9, -6, 15, 29, 9, -24,
                -15, 2, -41, -19, -13, -21, 3, -4,
        },
        // Rook
        {
                -9, -7, 0, 8, 8, 3, -18, -13,
                -22, -8, -10, -4, 0, 5, -3, -36,
                -22, -13, -8, -8, 1, 0, -2, -17,
                -18, -13, -6, 0, 4, -3, 3, -12,
                -12, -6, 4, 13, 12, 17, -4, -10,
                -2, 9, 13, 18, 8, 23, 30, 8,
                13, 16, 29, 31, 40, 33, 13, 22,
                16, 21, 16, 26, 32, 4, 15, 21,
        },
        // Queen
        {
                -5, -14, -5, 5, -8, -13, -21, -30,
                -22, -9, 5, 1, 4, 7, -6, -5,
                -12, -4, -5, -1, -3, 1, 2, -3,
                -10, -18, -5, -5, -1, -2, -4, -7,
                -19, -19, -8, -8, 0, 8, -6, -46,
                -11, -13, 3, 4, 14, 28, 18, 24,
                -17, -25, -3, 1, -8, 28, 9, 22,
                -19, -5, 14, 6, 29, 22, 17, 18,
        },
        // King
        {
                -7, 18, 6, -27, 4, -14, 12, 7,
                0, 4, -4, -32, -21, -8, 5, 4,
                -7, -7, -11, -23, -22, -15, -7, -14,
                -24, 0, -13, -20, -23, -22, -17, -26,
                -9, -10, -6, -14, -15, -12, -7, -18,
                -5, 12, 1, -8, -10, 3, 11, -11,
                14, 0, -10, -4, -4, -2, -19, -15,
                -33, 11, 8, -8, -28, -17, 1, 6,
        }
};

/**
 * @brief Die PSQT aus der Sicht der weißen Figuren für das Endgame.
 *
 * Sehr ähnlich wie https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function.
 */
static constexpr int16_t EG_PSQT[7][64] = {
        // Empty
        {},
        // Pawn
        {
                0, 0, 0, 0, 0, 0, 0, 0,
                6, 4, 4, 5, 6, 0, 1, -4,
                2, 4, -3, 0, 0, -2, 0, -4,
                6, 4, -2, -4, -4, -4, 2, -1,
                16, 12, 6, 2, -1, 2, 9, 9,
                47, 50, 43, 34, 28, 27, 41, 42,
                89, 87, 79, 67, 74, 66, 82, 93,
                0, 0, 0, 0, 0, 0, 0, 0,
        },
        // Knight
        {
                -15, -26, -12, -8, -11, -9, -25, -32,
                -21, -10, -5, -3, -1, -10, -12, -22,
                -11, -2, -1, 7, 5, -2, -10, -11,
                -9, -3, 8, 12, 8, 8, 2, -9,
                -9, 2, 11, 11, 11, 6, 4, -9,
                -12, -10, 5, 4, 0, -4, -10, -20,
                -12, -4, -12, -1, -5, -12, -12, -26,
                -29, -19, -7, -14, -15, -13, -32, -50,
        },
        // Bishop
        {
                -12, -5, -12, -3, -5, -8, -3, -9,
                -7, -9, -4, -1, 2, -4, -8, -13,
                -6, -1, 4, 5, 7, 1, -4, -8,
                -3, 1, 6, 10, 3, 5, -2, -5,
                -1, 4, 6, 4, 7, 5, 1, 1,
                1, -4, 0, -1, -1, 3, 0, 2,
                -4, -2, 3, -6, -2, -6, -2, -7,
                -7, -10, -6, -4, -4, -5, -8, -12,
        },
        // Rook
        {
                -4, 1, 2, -1, -3, -7, 2, -10,
                -3, -3, 0, 1, -5, -5, -6, -2,
                -2, 0, -2, 0, -4, -6, -4, -8,
                1, 2, 4, 2, -3, -3, -4, -5,
                2, 2, 7, 0, 1, 1, -1, 1,
                3, 3, 3, 2, 2, -1, -2, -1,
                5, 6, 6, 5, -1, 1, 4, 1,
                6, 5, 9, 7, 6, 6, 4, 3,
        },
        // Queen
        {
                -17, -14, -11, -21, -3, -16, -10, -20,
                -11, -11, -15, -8, -8, -12, -18, -16,
                -8, -14, 7, 3, 4, 8, 5, 2,
                -9, 14, 9, 23, 16, 17, 20, 12,
                1, 11, 12, 23, 29, 20, 29, 18,
                -10, 3, 4, 24, 24, 17, 9, 4,
                -9, 10, 16, 20, 29, 12, 15, 0,
                -5, 11, 11, 13, 13, 9, 5, 10,
        },
        // King
        {
                -27, -17, -11, -6, -14, -7, -12, -22,
                -14, -6, 2, 7, 7, 2, -2, -9,
                -10, -2, 5, 10, 11, 8, 4, -5,
                -9, -2, 10, 12, 13, 11, 4, -6,
                -4, 11, 12, 13, 13, 17, 13, 2,
                5, 9, 12, 8, 10, 22, 22, 7,
                -6, 9, 7, 9, 9, 19, 12, 6,
                -37, -18, -9, -9, -5, 7, 2, -9,
        },
};

#endif