#ifndef PSQT_H
#define PSQT_H

#include <stdint.h>

/**
 * @brief Die PSQT aus der Sicht der weißen Figuren für das Midgame.
 * 
 * Sehr ähnlich wie https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function.
 */
static constexpr int16_t MG_PSQT[7][64] = {
        // Empty
                {},
        // Pawn
        {
                0, 0, 0, 0, 0, 0, 0, 0,
                -12, 0, -6, -4, -8, 8, 12, -8,
                -10, -1, -1, -3, 0, 0, 11, -6,
                -9, -1, -1, 4, 5, 2, 3, -8,
                -4, 4, 2, 2, 2, 4, 5, -8,
                -2, 3, 4, -1, -2, 8, 4, -3,
                16, 22, 10, 16, 11, 20, 5, -2,
                0, 0, 0, 0, 0, 0, 0, 0,
        },
        // Knight
        {
                -34, -7, -19, -11, -5, -9, -7, -8,
                -10, -18, -4, -1, 0, 6, -4, -5,
                3, -3, 4, 3, 6, 5, 8, -5,
                -2, 6, 6, 9, 4, 5, 1, -4,
                7, 6, 22, 12, 18, 6, 6, -3,
                14, 24, 43, 28, 21, 12, 20, -16,
                -5, 2, 20, 8, 12, 24, -13, -25,
                -36, -4, -32, 20, -16, -11, -30, -55,
        },
        // Bishop
        {
                -11, 0, -4, -6, -4, -4, -13, -6,
                1, 4, 4, 0, 2, 6, 10, 0,
                0, 4, 4, 4, 4, 8, 6, 3,
                -2, 4, 4, 8, 11, 4, 3, 1,
                -1, 1, 6, 16, 12, 12, 2, 0,
                -5, 12, 14, 13, 11, 16, 12, 0,
                -8, 5, -6, -4, 10, 19, 6, -16,
                -10, 1, -27, -12, -8, -14, 2, -2,
        },
        // Rook
        {
                -6, -5, 0, 5, 5, 2, -12, -9,
                -14, -5, -6, -2, 0, 3, -2, -24,
                -14, -9, -5, -5, 0, 0, -1, -11,
                -12, -9, -4, 0, 2, -2, 2, -8,
                -8, -4, 2, 8, 8, 11, -2, -6,
                -1, 6, 8, 12, 5, 15, 20, 5,
                8, 10, 20, 21, 26, 22, 8, 14,
                10, 14, 10, 17, 21, 2, 10, 14,
        },
        // Queen
        {
                -3, -9, -3, 3, -5, -9, -14, -20,
                -14, -6, 3, 0, 2, 4, -4, -3,
                -8, -2, -3, 0, -1, 0, 1, -2,
                -7, -12, -3, -3, 0, -1, -2, -4,
                -12, -12, -5, -5, 0, 5, -4, -31,
                -7, -9, 2, 2, 9, 19, 12, 16,
                -11, -17, -2, 0, -5, 19, 6, 16,
                -12, -3, 9, 4, 19, 16, 11, 12,
        },
        // King
        {
                -4, 12, 4, -18, 3, -9, 8, 4,
                0, 3, -3, -21, -14, -6, 4, 3,
                -4, -4, -7, -15, -14, -10, -4, -9,
                -16, 0, -9, -13, -14, -14, -11, -17,
                -6, -7, -4, -9, -10, -8, -4, -12,
                -3, 8, 0, -5, -6, 2, 7, -7,
                9, 0, -6, -2, -2, -1, -12, -10,
                -22, 7, 5, -5, -18, -11, 0, 2,
        }
};


/**
 * @brief Die PSQT aus der Sicht der weißen Figuren für das Endgame.
 *
 * Sehr ähnlich wie https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function.
 */
static constexpr int16_t EG_PSQT[7][64] = {
        // Empty
        {},
        // Pawn
        {
                0, 0, 0, 0, 0, 0, 0, 0,
                4, 2, 2, 3, 4, 0, 0, -2,
                1, 2, -2, 0, 0, -1, 0, -2,
                4, 2, -1, -2, -2, -2, 1, 0,
                10, 8, 4, 1, -1, 1, 6, 6,
                31, 33, 28, 22, 18, 18, 27, 28,
                59, 58, 52, 44, 49, 44, 55, 62,
                0, 0, 0, 0, 0, 0, 0, 0,
        },
        // Knight
        {
                -10, -17, -8, -5, -7, -6, -16, -21,
                -14, -7, -3, -2, -1, -6, -8, -14,
                -7, -1, 0, 4, 3, -1, -6, -7,
                -6, -2, 5, 8, 5, 5, 1, -6,
                -6, 1, 7, 7, 7, 4, 2, -6,
                -8, -6, 3, 2, 0, -3, -6, -13,
                -8, -2, -8, 0, -3, -8, -8, -17,
                -19, -12, -4, -9, -10, -9, -21, -33,
        },
        // Bishop
        {
                -8, -3, -8, -2, -3, -5, -2, -6,
                -5, -6, -2, 0, 1, -2, -5, -8,
                -4, -1, 2, 2, 3, 1, -2, -5,
                -2, 1, 4, 6, 2, 3, -1, -3,
                -1, 2, 4, 2, 3, 2, 1, 1,
                0, -2, 0, -1, -1, 1, 0, 1,
                -2, -1, 2, -4, -1, -4, -1, -4,
                -5, -6, -4, -3, -3, -3, -5, -8,
        },
        // Rook
        {
                -3, 1, 1, 0, -2, -4, 1, -6,
                -2, -2, 0, 1, -3, -3, -4, -2,
                -1, 0, -1, 0, -2, -4, -2, -5,
                1, 1, 2, 1, -2, -2, -2, -3,
                1, 1, 4, 0, 0, 0, 0, 0,
                2, 2, 2, 1, 1, 0, 0, 0,
                3, 4, 4, 3, 0, 1, 2, 1,
                4, 3, 6, 5, 4, 4, 2, 2,
        },
        // Queen
        {
                -11, -9, -7, -14, -2, -11, -7, -13,
                -7, -7, -10, -5, -5, -8, -12, -10,
                -5, -9, 4, 2, 2, 5, 3, 1,
                -6, 9, 6, 15, 10, 11, 13, 8,
                0, 7, 8, 15, 19, 13, 19, 12,
                -7, 2, 2, 16, 16, 11, 6, 2,
                -6, 7, 10, 13, 19, 8, 10, 0,
                -3, 7, 7, 8, 8, 5, 3, 6,
        },
        // King
        {
                -18, -11, -7, -4, -9, -4, -8, -14,
                -9, -4, 1, 4, 4, 1, -1, -6,
                -6, -1, 3, 6, 7, 5, 2, -3,
                -6, -1, 6, 8, 8, 7, 2, -4,
                -3, 8, 8, 8, 8, 11, 8, 1,
                3, 6, 8, 5, 6, 14, 14, 4,
                -4, 6, 4, 6, 6, 12, 8, 4,
                -24, -12, -6, -6, -4, 4, 1, -4,
        },
};


#endif