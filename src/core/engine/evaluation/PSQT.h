#ifndef PSQT_H
#define PSQT_H

#include <stdint.h>

/**
 * @brief Die PSQT aus der Sicht der weißen Figuren für das Midgame.
 * 
 * Sehr ähnlich wie https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function.
 */
static constexpr int16_t MG_PSQT[7][64] = {
        // Empty
        {},
        // Pawn
        {
                0, 0, 0, 0, 0, 0, 0, 0, 
                -11, 19, 12, -7, -11, -10, 0, -17, 
                -6, 16, 1, 1, -5, -2, -2, -13, 
                -9, 10, 12, 16, 12, -2, -1, 0, 
                -8, 16, 12, 22, 20, 6, 12, 3, 
                -7, 24, 112, 64, 15, 26, 6, 6, 
                -2, 34, 252, 68, 47, 60, 134, 94, 
                0, 0, 0, 0, 0, 0, 0, 0, 
        },
        // Knight
        {
                -11, -9, -14, -8, -16, -29, -10, -52, 
                -9, -7, 9, 0, -1, -6, -26, -14, 
                -8, 12, 8, 9, 5, 6, -4, -11, 
                -4, 10, 9, 14, 6, 8, 2, -6, 
                11, 9, 34, 18, 26, 9, 8, -4, 
                22, 36, 64, 42, 32, 18, 30, -23, 
                -8, 3, 31, 11, 18, 36, -20, -36, 
                -53, -7, -48, 30, -24, -17, -44, -83, 
        },
        // Bishop
        {
                -10, -19, -6, -6, -10, -7, -1, -16, 
                0, 16, 10, 3, 0, 8, 7, 2, 
                5, 9, 13, 7, 7, 7, 7, 0, 
                2, 5, 6, 17, 13, 6, 6, -3, 
                -1, 3, 18, 18, 25, 9, 2, -2, 
                -1, 18, 25, 17, 20, 21, 18, -8, 
                -23, 9, 29, 15, -6, -9, 8, -13, 
                -4, 3, -21, -12, -18, -41, 2, -14, 
        },
        // Rook
        {
                -13, -18, 3, 8, 8, 0, -6, -9, 
                -35, -3, 5, 0, -4, -10, -8, -22, 
                -16, -2, 0, 1, -8, -8, -12, -22, 
                -11, 3, -3, 4, 0, -6, -13, -18, 
                -10, -4, 17, 12, 13, 3, -5, -12, 
                8, 30, 22, 8, 18, 13, 9, -2, 
                22, 13, 33, 40, 31, 29, 16, 13, 
                21, 15, 4, 31, 25, 16, 21, 16, 
        },
        // Queen
        {
                -25, -15, -12, -7, 5, -4, -9, 0, 
                0, -1, 7, 4, 1, 5, -4, -17, 
                2, 7, 1, -2, -1, -5, 1, -7, 
                -1, 1, -2, -1, -5, -4, -13, -4, 
                0, -1, 8, 0, -8, -8, -13, -13, 
                28, 23, 28, 14, 4, 3, -8, -6, 
                27, 14, 28, -8, 0, -2, -19, -12, 
                22, 21, 22, 29, 6, 14, 0, -14, 
        },
        // King
        {
                7, 12, 4, -14, -27, 6, 18, -7, 
                4, 4, -8, -21, -32, -4, 3, 0, 
                -13, -7, -15, -22, -23, -11, -7, -7, 
                -25, -16, -22, -23, -19, -13, 0, -24, 
                -18, -7, -12, -15, -13, -6, -10, -8, 
                -11, 11, 3, -10, -8, 1, 12, -4, 
                -14, -19, -2, -4, -3, -10, 0, 14, 
                6, 1, -17, -28, -7, 8, 11, -32, 
        }
};

/**
 * @brief Die PSQT aus der Sicht der weißen Figuren für das Endgame.
 *
 * Sehr ähnlich wie https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function.
 */
static constexpr int16_t EG_PSQT[7][64] = {
        // Empty
        {},
        // Pawn
        {
                0, 0, 0, 0, 0, 0, 0, 0, 
                -3, 1, 0, 6, 5, 4, 4, 6, 
                -4, 0, -2, 0, 0, -3, 3, 2, 
                0, 1, -4, -3, -3, -1, 4, 6, 
                8, 8, 2, -1, 2, 6, 12, 16, 
                42, 41, 26, 28, 33, 42, 50, 47, 
                93, 82, 66, 73, 67, 79, 86, 89, 
                0, 0, 0, 0, 0, 0, 0, 0, 
        },
        // Knight
        {
                -32, -25, -9, -11, -7, -11, -25, -14, 
                -22, -11, -10, -1, -2, -5, -10, -21, 
                -11, -10, -1, 5, 7, 0, -1, -11, 
                -9, 2, 8, 8, 12, 8, -3, -9, 
                -9, 4, 5, 11, 11, 11, 1, -8, 
                -20, -9, -4, 0, 4, 5, -10, -12, 
                -26, -12, -12, -4, -1, -12, -4, -12, 
                -49, -31, -13, -15, -14, -6, -19, -29, 
        },
        // Bishop
        {
                -8, -2, -8, -4, -2, -11, -4, -11, 
                -13, -7, -4, 2, 0, -3, -9, -7, 
                -7, -3, 1, 6, 5, 4, -1, -6, 
                -4, -1, 5, 3, 9, 6, 1, -3, 
                1, 1, 5, 7, 4, 6, 4, -1, 
                2, 0, 3, -1, 0, 0, -4, 1, 
                -7, -2, -6, -1, -6, 3, -2, -4, 
                -12, -8, -4, -3, -4, -5, -10, -7, 
        },
        // Rook
        {
                -10, 2, -6, -2, 0, 1, 1, -4, 
                -1, -5, -4, -4, 1, 0, -3, -3, 
                -8, -4, -6, -3, 0, -2, 0, -2, 
                -5, -4, -3, -2, 2, 4, 2, 1, 
                1, 0, 0, 1, 0, 6, 1, 2, 
                -1, -2, -1, 2, 2, 3, 3, 3, 
                1, 4, 1, -1, 5, 6, 6, 5, 
                2, 4, 6, 6, 7, 9, 5, 6, 
        },
        // Queen
        {
                -20, -10, -16, -2, -21, -11, -14, -16, 
                -16, -18, -11, -8, -8, -15, -11, -11, 
                2, 5, 8, 4, 3, 7, -13, -8, 
                11, 19, 17, 15, 23, 9, 14, -9, 
                18, 28, 20, 28, 22, 12, 11, 1, 
                4, 9, 17, 23, 24, 4, 3, -10, 
                0, 15, 12, 29, 20, 16, 10, -8, 
                10, 5, 9, 13, 13, 11, 11, -4, 
        },
        // King
        {
                -4, 1, 3, -2, -4, -4, -9, -18, 
                3, 6, 9, 4, 4, 3, 4, -3, 
                3, 11, 11, 5, 4, 6, 4, 2, 
                1, 6, 8, 6, 6, 6, 5, -2, 
                -3, 2, 5, 6, 6, 5, -1, -4, 
                -2, 2, 4, 5, 5, 2, -1, -5, 
                -4, -1, 1, 3, 3, 1, -3, -7, 
                -11, -6, -3, -7, -3, -5, -8, -13, 
        },
};


#endif